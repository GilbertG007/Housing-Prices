# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YWEYukyYawj9dYJ87b9QSZCs27IThDnn
"""

# loading dataset
# library
import pandas as pd

df= pd.read_csv("/content/M3_House_Worth.csv")
print(df)

# checking first rows
df.head()

# checking last rows
df.tail()

# DATA CLEANING

"""DATA CLEANING"""

# CHECK MISSING VALUES
df.isnull()

# check missing values in the entire dataset
df.isnull().sum()

"""no missing values

"""

# check for duplicates
df.duplicated()

df.describe()

# checking for data info
df.info()

df.shape

# cheching for data types
df.dtypes

# check for outliers(numerical columns)
numerical_columns= df.select_dtypes(include=['float64','int64']).columns
numerical_columns

outliers=df[numerical_columns].apply(lambda x:(x-x.mean()).abs()>3*x.std()).sum()
print("\nOutliers:")
print(outliers)

import seaborn as sns
import matplotlib.pyplot as plt
# Box plot to visualize the distribution of numerical variables across 'HouseNetWorth' categories
plt.figure(figsize=(12, 8))
sns.boxplot(x='HouseNetWorth', y='HousePrice', data=df)
plt.title('House Price Distribution by Net Worth')
plt.xlabel('HouseNetWorth')
plt.ylabel('House Price')
plt.show()

# Define the z-score threshold for outlier detection
threshold = 3

# Calculate z-scores for each numerical column
z_scores = df[numerical_columns].apply(lambda x: (x - x.mean()) / x.std())

# Find rows where any z-score exceeds the threshold
outlier_rows = z_scores[(z_scores.abs() > threshold).any(axis=1)]
outlier_rows

df_filter= df.drop(outlier_rows.index)
df_filter

# EDA

# summary stastics

df_filter.describe()

# visualization
# library

import seaborn as sns

import seaborn as sns
import matplotlib.pyplot as plt
# visualize as a pair
sns.pairplot(df_filter)

# Drop the 'HouseNetWorth' column temporarily for correlation calculation
numerical_df = df_filter.drop('HouseNetWorth', axis=1)

# Calculate the correlation matrix for numerical variables
correlation_matrix = numerical_df.corr()

# Plot the correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap (Numerical Variables)')
plt.show()

